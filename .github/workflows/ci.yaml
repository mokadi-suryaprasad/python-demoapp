name: Python CI Pipeline

on:
  push:
    branches:
      - master

env:
  AWS_REGION: ap-south-1
  ECR_REPO: development/namespace
  SONAR_HOST_URL: http://43.204.36.212:9000

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 1. Checkout Code
      uses: actions/checkout@v4

    - name: 2. Setup Python & Install Dependencies
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r src/requirements.txt

    - name: 3. Run Unit Tests
      run: |
        source venv/bin/activate
        pytest --maxfail=1 --disable-warnings -q

    - name: 4. SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner-cli-5.0.1.3006-linux.zip
        ./sonar-scanner-*/bin/sonar-scanner \
          -Dsonar.projectKey=python-app \
          -Dsonar.sources=src \
          -Dsonar.language=py \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN

    - name: 5. Upload Artifact to S3
      run: |
        zip -r python-artifact.zip src
        DATE=$(date +%F)
        aws s3 cp python-artifact.zip s3://pythonbuildfiles/python-service/$DATE/build-${{ github.run_number }}.zip
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

    - name: 6. Docker Build
      run: |
        docker build -t $ECR_REPO:${{ github.run_number }} .

    - name: 7. Trivy Image Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.ECR_REPO }}:${{ github.run_number }}
        severity: 'CRITICAL,HIGH'
        exit-code: '0'

    - name: 8. Push to AWS ECR
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        docker tag $ECR_REPO:${{ github.run_number }} $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:${{ github.run_number }}
        docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:${{ github.run_number }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: 9. OWASP ZAP DAST Scan
      run: |
        docker run -d -p 8080:8080 --name python-test $ECR_REPO:${{ github.run_number }}
        sleep 15
        docker run --network="host" -v ${{ github.workspace }}:/zap/wrk -t owasp/zap2docker-stable \
          zap-baseline.py -t http://localhost:8080 -r dast-report.html -J dast-report.json || true
        docker rm -f python-test

    - name: 10. Update K8s Deployment YAML & Push to Git
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_URL=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO
        sed -i "s|image: .*|image: ${ECR_URL}:${{ github.run_number }}|" deploy/kubernetes/deployment.yaml

        git config --global user.email "mspr9773@gmail.com"
        git config --global user.name "M Surya Prasad"
        git add deploy/kubernetes/deployment.yaml
        git commit -m "Update image tag to ${{ github.run_number }}"
        git push
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: ðŸ“‹ Publish OWASP ZAP Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dast-report
        path: dast-report.html
